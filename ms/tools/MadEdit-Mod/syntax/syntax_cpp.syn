# C/C++
Title=C/C++
CaseSensitive=Yes
Delimiter=~`!@#$%^&*()-+=|\{}[]:;"',.<>/?
LineComment=//
BlockComment=/* */
EscapeChar=\
StringChar="'
DirectiveLeading=#
KeywordPrefix=
SpecialWordPrefix=
IndentChar={:
UnindentChar=}
BracePair=( ) [ ] { } /* */
AutoCompletePair=() [] {} "" ''


# System Predefined Color & Style
TextColor=Black
TextBgColor=White
TextStyle=

DelimiterColor=SaddleBrown
DelimiterBgColor=
DelimiterStyle=

SpaceColor=Gray
SpaceBgColor=
SpaceStyle=

NumberColor=Orange
NumberBgColor=
NumberStyle=

StringColor=Red
StringBgColor=
StringStyle=

CommentColor=Teal
CommentBgColor=
CommentStyle=

DirectiveColor=Green
DirectiveBgColor=
DirectiveStyle=

SpecialWordColor=Navy
SpecialWordBgColor=
SpecialWordStyle=

LineNumberColor=White
LineNumberBgColor=A0A0A0
LineNumberStyle=

ActiveLineColor=EAEAF2
BookmarkColor=DeepSkyBlue
BookmarkBgColor=MediumBlue

# User Defined Keywords
[1.Keywords]
Color=Blue
BgColor=
Style=Bold
InRange=0
Keyword=_Pragma __asm __based __cdecl __declspec __except __far __fastcall __finally __fortran __huge __inline __int16 __int32 __int64 __int8 __interrupt __leave __loadds __multiple_inheritance __near __pascal __saveregs __segment __segname __self __single_inheritance __stdcall __try __uuidof __virtual_inheritance alignas alignof and and_eq atomic_cancel atomic_commit atomic_noexcept auto bool break case catch char char16_t char32_t class compl concept concept const const_cast constexpr continue decltype default delete dllexport dllimport do double dynamic_cast else enum explicit export extern false final float for friend goto if import inline int long module mutable naked namespace new not not_eq nullptr operator or or_eq override private protected public register reinterpret_cast requires return short signed sizeof static static_assert static_cast struct switch synchronized template this thread thread_local throw transaction_safe transaction_safe_dynamic true try typedef typeid typename union unsigned using uuid virtual void volatile wchar_t while xor xor_eq

